namespace Tester is
    use System.Exception;
    use IO.File;
    use IO.Path;
    use IO.Directory;
    use IO.DirectoryInfo;

    use Collections.Iterable;
    use Collections.LIST;

    enum COMPILER_RUN_MODE is
        CI,
        LOCAL,
        DOTNET
    si

    class COMPILER_UNDER_TEST is
        _run_mode: COMPILER_RUN_MODE;
        _publish: string;
        _executable: string;
        _runtime_path: string;
        _arguments: Iterable[string];
        _use_dotnet: bool;

        init(run_mode: COMPILER_RUN_MODE) is
            _run_mode = run_mode;

            if _run_mode == COMPILER_RUN_MODE.DOTNET then
                _executable = "dotnet";
                _arguments = ["build"];
            elif _run_mode == COMPILER_RUN_MODE.CI then
                _executable = "dotnet";
                _runtime_path = get_ghul_test_runtime_path();
                _arguments = ["ghul-compiler", "--v3", "--test-run"];
            elif _run_mode == COMPILER_RUN_MODE.LOCAL then
                _publish = find_publish_directory();

                _executable = find_published_compiler();
                _runtime_path = get_published_compiler_path("ghul-runtime.dll");
                _arguments = ["--v3", "--test-run"];
            else
                throw Exception("unknown run mode: " + _run_mode);
            fi
        si
        
        run_compiler(runner: RUNNER, test: TEST) -> bool is
            let arguments = LIST[string]();

            arguments.add_range(_arguments);

            if test.flags? /\ test.flags.length > 0 then
                arguments.add_range(
                    test.flags.split([' ']) | .map((flag) => flag.trim())
                );
            fi

            let result = -1;

            if _run_mode == COMPILER_RUN_MODE.DOTNET then
                result = runner.run(
                    _executable,
                    arguments,
                    5000,
                    "compiler.out", // MSBuild coerces stderr output to stdout
                    null
                );
            else
                arguments.add_range(test.source_files);
                arguments.add_range(["-o", "binary.exe"]);

                result = runner.run(
                    _executable,
                    arguments,
                    5000,
                    null,
                    "compiler.out"
                );
            fi

            if !File.exists(runner.get_path("compiler.out")) then
                throw Exception("compiler output file not found");
            fi

            if result != 0 then
                return false;
            fi

            if _run_mode != COMPILER_RUN_MODE.DOTNET /\ !runner.read_all_text("compiler.out").contains("*** succeeded ***") then
                throw Exception("compiler success exit status but success message not found in output");
            fi

            // FIXME: this is a bit convoluted:
            return File.exists(get_binary_path(runner));
        si

        get_binary_path_relative_to_test_folder(runner: RUNNER) -> string =>
            if _run_mode == COMPILER_RUN_MODE.DOTNET then
                Path.join(["bin", "Debug", "net8.0", "binary.dll"])
            else
                "binary.exe"
            fi;

        get_binary_path(runner: RUNNER) -> string =>
            if _run_mode == COMPILER_RUN_MODE.DOTNET then
                Path.join([runner.get_path(), "bin", "Debug", "net8.0", "binary.dll"]);
            else
                runner.get_path("binary.exe");
            fi;

        run_ln_runtime(runner: RUNNER) -> bool =>
            if _run_mode == COMPILER_RUN_MODE.DOTNET then
                true;
            else
                runner.run(
                    "ln",
                    ["-s", _runtime_path, "."],
                    1000,
                    null,
                    null
                ) != 0;
            fi;

        find_publish_directory() -> string =>
            find_publish_directory(DirectoryInfo(Directory.get_current_directory()));

        find_publish_directory(from: DirectoryInfo) -> string is
            if !from? then
                throw Exception("could not find a publish directory");
            fi
            
            let publish = from.get_directories("publish") | .first();

            if publish.has_value then
                return publish.value.full_name;
            fi

            return find_publish_directory(from.parent);
        si

        find_published_compiler() -> string is
            let result = get_published_compiler_path("ghul");

            if File.exists(result) then
                return result;
            fi

            result = get_published_compiler_path("ghul.exe");

            if File.exists(result) then
                return result;
            fi

            throw Exception("Could not find published compiler: {get_published_compiler_path("[ghul|ghul.exe]")}");
        si
        
        get_published_compiler_path(file_name: string) -> string =>
            Path.join(_publish, file_name);

        get_ghul_test_runtime_path() -> string =>
            let
                executing_assembly = System.Reflection.Assembly.get_executing_assembly(),
                assembly_path = Path.get_full_path(executing_assembly.location),
                result = Path.get_directory_name(assembly_path)
            in
                Path.join(result, "ghul-runtime.dll");
    si
si
