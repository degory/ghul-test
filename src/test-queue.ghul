namespace Tester is
    use System.Exception;

    use IO.Std;
    use IO.Directory;
    use IO.File;
    use IO.Path;

    use Collections.Iterable;
    use Collections.MutableList;
    use Collections.LIST;

    class TEST_QUEUE is
        _host_cli: string;
        _target_cli: string;
        _is_ci: bool;
        _compiler_under_test: COMPILER_UNDER_TEST;

        _task_queue: TASK_QUEUE;

        _tests: MutableList[TEST];

        progress: int;
        count: int => _tests.count;

        executed_count: int => _tests | .filter(t => t.has_executed).count();
        pass_count: int => _tests | .filter(t => t.has_passed).count();
        fail_count: int => _tests | .filter(t => t.has_failed).count();

        init(
            host_cli: string, 
            target_cli: string,
            is_ci: bool,
            compiler_under_test: COMPILER_UNDER_TEST)
        is
            _host_cli = host_cli;
            _target_cli = target_cli;
            _is_ci = is_ci;
            _compiler_under_test = compiler_under_test;

            let requested_test_processes = System.Environment.get_environment_variable("TEST_PROCESSES");

            let actual_test_processes: int;

            // _runtime_path = get_runtime_path();

            if requested_test_processes? then
                actual_test_processes = System.Convert.to_int32(requested_test_processes);                
            else
                let cpu_count = System.Environment.processor_count;

                if cpu_count <= 6 then
                    actual_test_processes = cpu_count * 2;
                else
                    actual_test_processes = cpu_count * 3 / 2;
                fi
            fi
            
            _task_queue = new TASK_QUEUE(actual_test_processes);

            Std.write_line("using " + actual_test_processes + " processes to run tests");

            _tests = new LIST[TEST]();
        si

        run_queued_tests() -> Iterable[Result] is
            let i = 0;

            for test in _tests do
                let runner = 
                    new RUNNER(
                        _host_cli,
                        _target_cli,
                        _compiler_under_test,
                        test
                    );

                let results = _task_queue.queue(runner.get_run());

                report_progress(results);
            od

            let results = _task_queue.drain();

            while results? do
                report_progress(results);
                results = _task_queue.drain();
            od
        si

        report_progress(results: Iterable[Result]) is
            for result in results do
                let p = 100 * progress / count;

                result.progress = p;

                Std.write_line(result);

                progress = progress + 1;            
            od
        si

        try_queue_tests(path: string) is
            try                
                try_queue_test(path);

                let entries = new LIST[string](Directory.get_directories(path));
                
                entries.sort();

                for entry in entries do
                    // FIXME: appears not to be needed:
                    if entry =~ "." \/ entry =~ ".." \/ entry =~ "template" then
                        continue;
                    fi

                    try_queue_tests(entry);
                od
            catch ex: Exception
                Std.write_line("probably not a directory: " + path);
                Std.write_line("caught: " + ex);
            yrt            
        si

        try_queue_test(path: string) is
            let flags_path = path + "/ghulflags";

            if !File.exists(flags_path) then
                return;
            fi

            let flags = File.read_all_text(flags_path);
            let source_files = get_source_files(path);
            let is_build_failure_Expected = File.exists(path + "/fail.expected");

            queue_test(
                new TEST(
                    path,
                    source_files,
                    flags,
                    is_build_failure_Expected
                )
            );
        si

        queue_test(test: TEST) is
            _tests.add(test);
        si

        get_source_files(path: string) -> Iterable[string] =>
            Directory.get_files(path, "*.ghul") | 
                .map(path: string => Path.get_file_name(path));
    si
si
