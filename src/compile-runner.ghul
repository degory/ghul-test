namespace Tester is
    use System.Exception;
    use System.Text.StringBuilder;

    use Collections.Iterable;
    use Collections.List;
    use Collections.MutableList;
    use Collections.Map;
    use Collections.MutableMap;
    use Collections.LIST;
    use Collections.MAP;

    use Pair = Collections.KeyValuePair`2;

    use IO.Std;
    use IO.File;
    use IO.Directory;

    use System.Diagnostics.Process;
    use System.Diagnostics.ProcessStartInfo;

    class COMPILE_RUNNER: Runner is
        _collate_environment: MutableMap[string,string] static;

        _host_cli: string;
        _target_cli: string;

        _failure: FAILURE;
        _compiler_under_test: COMPILER_UNDER_TEST;

        _test: TEST;

        init(
            host_cli: string,
            target_cli: string,
            compiler_under_test: COMPILER_UNDER_TEST,
            test: TEST
        ) is
            _host_cli = host_cli;
            _target_cli = target_cli;
            _compiler_under_test = compiler_under_test;
            _test = test;

            if !_collate_environment? then
                _collate_environment = new MAP[string,string]();
                _collate_environment.add("LC_COLLATE", "C");                    
            fi
        si

        get_result() -> Result is
            if _failure? then
                return _failure;
            else
                return new PASS(_test);
            fi
        si

        get_run() -> () -> Result
            is               
                return () -> Result is
                    let result = run_test();
                    
                    return result;
                si;
            si
        
        run_test() -> Result is
            try
                if Directory.get_files(_test.path, "disabled*")| .count() > 0 then
                    return new SKIP(_test);
                fi

                _run_test();

                clean_up();

                mark_if_failed();

                return get_result();
            catch ex: Exception
                return new FAILURE(_test, ex.message, ex.stack_trace);
            yrt
        si

        _run_test() is
            if _test.source_files| .count() == 0 then
                add_fail("no source files found");
                return;
            fi

            let build_succeeded = _compiler_under_test.run_compiler(self, _test);

            if build_succeeded then
                if _test.is_build_fail_expected then
                    add_fail("unexpected build success: " + _test.path);

                    return;
                fi
            else
                if !_test.is_build_fail_expected then
                    add_fail("unexpected build failure", "compiler.out");

                    return;
                fi
            fi

            run_grep("error:", "compiler.out", "err.grep");
                 
            run_grep("warn:", "compiler.out", "warn.grep");

            run_sort("err.grep", "err.sort");

            run_sort("warn.grep", "warn.sort");

            run_diff("errors", "err.expected", "err.sort", "err.diff", true);

            run_diff("warnings", "warn.expected", "warn.sort", "warn.diff", true);

            run_diff_il_out();

            if !build_succeeded then
                return;
            fi

            _compiler_under_test.run_ln_runtime(self);

            if !run_binary() then
                return;
            fi

            run_diff("test output", "run.expected", "run.out", "run.diff", true);
        si        

        clean_up() is
            if !_failure? then
                delete_files([
                    "binary.exe",
                    "binary.exe.mdb",
                    "binary.runtimeconfig.json",                 
                    "compiler.out",
                    "sed.out",
                    "warn.grep",
                    "warn.diff",
                    "warn.diff",
                    "err.grep",
                    "err.sort",
                    "err.diff",
                    "out.il",
                    "il.out",
                    "il.diff",
                    "run.out",
                    "run.err",
                    "run.diff",
                    "ghul-runtime.dll"
                ]);
            fi            
        si
        
        run_binary() -> bool is
            let binary_path = get_path("binary.exe");

            if !File.exists(binary_path) then
                add_fail("no binary found: " + binary_path);
                return false;
            fi

            let exit_status =
                run(
                    _target_cli,
                    ["binary.exe"],
                    5000,
                    "run.out",
                    "run.err"
                );
            
            if 
                exit_status != 0
            then
                add_fail("binary exited with non-zero status (" + exit_status + ")", "run.err");
                return false;
            fi

            return true;
        si
        
        run_diff_il_out() is
            let want_delete_il_out = false;
            let il_out_path = get_path("il.out"); 

            if !File.exists(il_out_path) then
                File.create(il_out_path).close();
            fi
            
            run_diff("IL output", "il.expected", "il.out", "il.diff", true);

            if want_delete_il_out then
                File.delete(il_out_path);
            fi            
        si
       
        run_grep(pattern: string, in_file: string, out_file: string) -> bool is
            return
                run(
                    "fgrep",
                    [pattern, in_file],
                    5000,
                    out_file,
                    null,
                    _collate_environment
                ) != 0;
        si

        run_sort(in_file: string, out_file: string) -> bool is
            return
                run(
                    "sort",
                    [in_file, "--output=" + out_file],
                    5000,
                    null,
                    null,
                    _collate_environment
                ) != 0;            
        si
        
        run_diff(
            description: string, 
            expected_file_name: string, 
            actual_file_name: string, 
            out_file_name: string, 
            ignore_space_changes: bool
        ) -> bool
        is
            let expected_path = get_path(expected_file_name);
            let actual_path = get_path(actual_file_name);
            let out_path = get_path(out_file_name);

            if
                !File.exists(expected_path)
            then
                expected_file_name = "/dev/null";
            fi

            if
                !File.exists(actual_path)
            then
                return false;
            fi

            let args: string[];

            if ignore_space_changes then
                args = ["-b", "--strip-trailing-cr", expected_file_name, actual_file_name];
            else
                args = [expected_file_name, actual_file_name];
            fi

            let result = run(
                "diff",
                args,
                5000,
                out_file_name,
                null
            );

            if result != 0 then
                add_fail(description, out_file_name);
            fi
                
            return result == 0;
        si

        run(
            path: string,
            arguments: Iterable[string],
            timeout: int,
            out_file: string,
            err_file: string
        ) -> int => 
            run(path, arguments, timeout, out_file, err_file, null);

        run(
            path: string,
            arguments: Iterable[string],
            timeout: int,
            out_file: string,
            err_file: string,
            environment: Iterable[Pair[string,string]]
        ) -> int
        is
            let process = start(path, arguments, environment);
            
            return wait(process, timeout, out_file, err_file);
        si

        start(path: string, arguments: Iterable[string]) -> Process =>
            start(path, arguments, null);

        start(path: string, arguments: Iterable[string], environment: Iterable[Pair[string,string]]) -> Process is
            let start_info = new System.Diagnostics.ProcessStartInfo();

            start_info.file_name = path;

            start_info.use_shell_execute = false;

            if environment? then
                for element in environment do
                    start_info.environment.add(element.key, element.value);
                od                        
            fi

            // FIXME: StartInfo.arguments_list is broken:
            // for arg in arguments do
            //     start_info.argument_list.add(arg);                
            // od

            let arguments_string = new StringBuilder();

            if arguments? then
                start_info.arguments =
                    arguments |
                        .map(arg => 
                            arg.replace("\\", "\\\\").replace("\"", "\"\""))
                        .to_string(" ");
            fi
            
            start_info.working_directory = _test.path;

            start_info.redirect_standard_output = true;
            start_info.redirect_standard_error = true;
            start_info.use_shell_execute = false;

            let result = Process.start(start_info);

            if result == null then
                throw new Exception("failed to start process: " + path + " " + arguments| .to_string(" "));
            fi
            
            return result;
        si

        wait(process: Process, timeout: int, out_file_name: string, err_file_name: string) -> int is
            if out_file_name? then
                let stdout = process.standard_output.read_to_end();
                write_all_text(out_file_name, stdout);
            fi
            
            if err_file_name? then
                let stderr = process.standard_error.read_to_end();
                write_all_text(err_file_name, stderr);
            fi
            
            process.wait_for_exit(5000);

            return process.exit_code;
        si

        add_fail(message: string) is
            add_fail(message, null);
        si
        
        add_fail(message: string, file_name: string) is
            let details: DETAILS;

            if file_name? then
                details = new DETAILS(message, read_all_text_quiet(file_name));
            else
                details = new DETAILS(message);                
            fi

            if !_failure? then
                _failure = new FAILURE(_test, details);
            else
                _failure.add(details);
            fi
        si

        mark_if_failed() is
            if _failure? then
                File.create(get_path("failed")).close();
            else
                delete_file("failed");
            fi
        si

        delete_files(file_names: Iterable[string]) is
            for file_name in file_names do
                delete_file(file_name);
            od
        si
        
        delete_file(file_name: string) is
            let file_path = get_path(file_name);

            if File.exists(file_path) then
                File.delete(file_path);
            fi
        si
        
        get_path(file_name: string) -> string =>
            _test.path + "/" + file_name;

        write_all_text(file_name: string, text: string) is
            File.write_all_text(get_path(file_name), text);
        si
        
        read_all_text(file_name: string) -> string =>
            File.read_all_text(get_path(file_name));

        read_all_text_quiet(file_name: string) -> string is
            let file_path = get_path(file_name);

            if !File.exists(file_path) then
                return "(could not read file: " + file_path + ")";
            fi
            
            return File.read_all_text(get_path(file_name));
        si
    si

    class COMPILE_RUNNER: Runner is
        
    si    
si
