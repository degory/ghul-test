namespace Tester is
    use System.Exception;
    use System.Text.StringBuilder;
    use System.Text.UTF8Encoding;

    use Collections.Iterable;
    use Collections.List;
    use Collections.MutableList;
    use Collections.LIST;

    use IO.Std;
    use IO.Directory;
    use IO.File;

    class Main is
        entry(arguments: string[]) -> int static is
            Std.output_encoding = UTF8Encoding();

            if arguments.count == 0 then
                Std.write_line("usage: ghul-test <test-folder>...");
                return 1;
            fi
            
            let host = get_cli_environment_variable("HOST");
            let target = get_cli_environment_variable("TARGET");

            // report_host_and_target(host, target);

            let ci_string = 
                System.Environment.get_environment_variable("CI");

            let run_mode = COMPILER_RUN_MODE.LOCAL;

            if 
                !string.is_null_or_white_space(ci_string) /\
                (ci_string =~ "1" \/ ci_string.to_lower() =~ "true")
            then
                run_mode = COMPILER_RUN_MODE.CI;
            fi

            let arguments_to_skip = 0;

            if arguments.count > 1 /\ arguments[0] =~ "--use-dotnet-build" then
                run_mode = COMPILER_RUN_MODE.DOTNET;
                arguments_to_skip = 1;
            fi
            
            let compiler_under_test = COMPILER_UNDER_TEST(run_mode);

            let queue = TEST_QUEUE(host, target, compiler_under_test);

            for path in arguments | .skip(arguments_to_skip) do
                if !Directory.exists(path) then
                    Std.write_line("not a directory: " + path);
                    return 1;
                fi
                
                queue.try_queue_tests(path);
            od

            queue.run_queued_tests();

            Std.write_line("" + queue.count + " tests discovered");
            Std.write_line("" + queue.executed_count + " tests enabled");
            Std.write_line("" + queue.pass_count + "/" + queue.executed_count + " tests passed");

            if queue.fail_count == 0 then
                Std.write_line("" + cast char(9989) + " all tests passed " + cast char(9989));
                return 0;
            fi
            
            Std.write_line("" + cast char(10060) + " " + queue.fail_count + " tests failed " + cast char(10060));

            return 1;
        si

        report_host_and_target(host: string, target: string) static is
            Std.write_line("compiler hosted on: " + get_cli_description(host));
            Std.write_line("built tests executed on: " + get_cli_description(target));
        si

        get_cli_description(name: string) -> string static =>
            if name =~ "mono" then
                "Mono";
            elif name =~ "dotnet" then
                ".NET";
            else
                throw Exception("unknown CLI environment: " + name);
            fi;
                
        get_cli_environment_variable(name: string) -> string static =>
            let result = System.Environment.get_environment_variable(name) in
            
            if result? then
                result
            else
                "dotnet";
            fi;
    si
si