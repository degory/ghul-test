namespace Tester is
    use System.Text.StringBuilder;

    use IO.Std;

    use Collections.Iterable;
    use Collections.MutableList;
    use Collections.LIST;

    class Result is
        test: TEST;

        _progress: int;
        progress: int public => _progress, = value is
            if value < 0 then
                _progress = 0;
            elif value > 100 then
                _progress = 100;
            else
                _progress = value;
            fi            
        si

        progress_string: string => progress.to_string().pad_left(2) + "%";

        is_pass: bool is
            throw System.NotImplementedException();            
        si

        is_fail: bool is
            throw System.NotImplementedException();            
        si

        is_executed: bool => is_pass \/ is_fail;

        head: string is
            throw System.NotImplementedException();
        si
        
        body: string => null;

        init(test: TEST) is
            self.test = test;
            test.result = self;
        si
        
        format(test_name: string) -> string =>
            let result = "{progress_string} {head}: {test_name}" in

            if body? /\ body !~ "" then
                "{result}: {body}";
            else
                result
            fi;

        to_string() -> string => format(test.path);            
    si

    class SKIP: Result is
        is_pass: bool => false;
        is_fail: bool => false;
        head: string => "   skip";

        init(test: TEST) is super.init(test); si
    si

    class PASS: Result is
        is_pass: bool => true;
        is_fail: bool => false;
        head: string => "✅ pass";

        init(test: TEST) is super.init(test); si        
    si

    class FAILURE: Result is
        _details: MutableList[DETAILS];

        is_pass: bool => false;
        is_fail: bool => true;
        head: string => "❌ fail";

        body: string =>
            if _details.count == 0 then
                null;
            elif _details.count == 1 then
                _details[0].to_string();
            else
                _details | .to_string("\n");
            fi;

        init(test: TEST) is
            super.init(test);
            _details = LIST[DETAILS]();
        si

        init(test: TEST, details: DETAILS) is
            init(test);
            add(details);
        si

        init(test: TEST, message: string) is
            init(test, DETAILS(message));
        si

        init(test: TEST, message: string, details: string) is
            init(test, DETAILS(message, details));
        si
                        
        add(details: DETAILS) is
            _details.add(details);
        si        
    si
    
    class DETAILS is
        message: string;
        details: string;

        init(message: string) is
            self.message = message;
        si
        
        init(message: string, details: string) is
            self.message = message;
            self.details = details;
        si
        
        to_string() -> string is
            let result = StringBuilder();

            result.append(message);
            
            if details? then
                result
                    .append(":");

                if !details.contains('\n') then
                    result
                        .append(" ")
                        .append(details);
                else
                    for line in details.split(['\n']) do
                        result
                            .append("\n    ")
                            .append(line);
                    od
                fi
            fi

            return result.to_string();
        si        
    si
si
