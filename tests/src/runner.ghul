namespace Tests is
    use Collections;
    use IO;

    use Microsoft.VisualStudio.TestTools.UnitTesting.Assert;
    use NSubstitute;
    use NSubstitute.SubstituteExtensions.returns;

    use Tester;
    
    class RUNNER_Should is
        @test()

        init() is si

        get_private_instance_field(from: object, name: string) -> object is
            let non_public = cast int(System.Reflection.BindingFlags.NON_PUBLIC);
            let instance = cast int(System.Reflection.BindingFlags.INSTANCE);
            let binding_flags = cast System.Reflection.BindingFlags(non_public + instance); 

            let field = 
                from.get_type().get_field(
                    name,
                    binding_flags
                );

            return field.get_value(from);
        si

        set_private_instance_field(from: object, name: string, value: object) is
            let non_public = cast int(System.Reflection.BindingFlags.NON_PUBLIC);
            let instance = cast int(System.Reflection.BindingFlags.INSTANCE);
            let binding_flags = cast System.Reflection.BindingFlags(non_public + instance); 

            let field = 
                from.get_type().get_field(
                    name,
                    binding_flags
                );

            field.set_value(from, value);
        si

        get_private_static_field(from: object, name: string) -> object is
            let non_public = cast int(System.Reflection.BindingFlags.NON_PUBLIC);
            let instance = cast int(System.Reflection.BindingFlags.STATIC);
            let binding_flags = cast System.Reflection.BindingFlags(non_public + instance); 

            let field = 
                from.get_type().get_field(
                    name,
                    binding_flags
                );

            return field.get_value(null);
        si

        get_mock_COMPILER_UNDER_TEST() -> COMPILER_UNDER_TEST is
            return NSubstitute.Substitute.`for`[COMPILER_UNDER_TEST]([false]:object);
        si

        get_mock_TEST() -> TEST is
            return NSubstitute.Substitute.`for`[TEST]([
                "path/to/test",  // : string, 
                ["file_1.ghul", "file_2.ghul"], // : Iterable[string],
                "--stuff", // : string,
                false // : bool        
            ]);
        si
        
        get_mock_FAILURE() -> FAILURE is
            return NSubstitute.Substitute.`for`[FAILURE]([
                get_mock_TEST(),
                "this is a message",
                "and this is additional detail"
            ]);
        si

        get_real_FAILURE() -> FAILURE is
            return new FAILURE(
                get_mock_TEST(),
                "this is a message",
                "and this is additional detail"
            );
        si

        RUNNER__init__given_no_collate_environment__creates_collate_environment_of_correct_map_type() is
            @test()

            let arguments = System.Array.empty`[object]();

            let compiler_under_test = get_mock_COMPILER_UNDER_TEST();
            let test = get_mock_TEST();

            let runner = new RUNNER("dotnet", "dotnet", compiler_under_test, test);

            // get the private static field _collate_environment:
            let field_value = 
                get_private_static_field(
                    runner, 
                    "_collate_environment"
                );

            Std.error.write_line("field_value: " + field_value);

            if field_value? then
                Std.error.write_line("field_value type: " + field_value.get_type().to_string());
            fi

            should(isa Map[string,string](field_value)).be_true(null, null);
        si

        RUNNER__init__given_no_collate_environment__adds_LC_COLLATE_key_with_value_C() is
            @test()

            let arguments = System.Array.empty`[object]();

            let compiler_under_test = get_mock_COMPILER_UNDER_TEST();
            let test = get_mock_TEST();

            let runner = new RUNNER("dotnet", "dotnet", compiler_under_test, test);

            // get the private static field _collate_environment:
            let field_value = 
                get_private_static_field(
                    runner, 
                    "_collate_environment"
                );

            let collate_as_map = cast MutableMap[string,string](field_value);

            should(collate_as_map.contains_key("LC_COLLATE")).be_true(null, null);
            should(collate_as_map["LC_COLLATE"]).be("C", null, null);
        si

        RUNNER__get_result__given_failure__returns_failure() is
            @test()

            let arguments = System.Array.empty`[object]();

            let compiler_under_test = get_mock_COMPILER_UNDER_TEST();
            let test = get_mock_TEST();
            let runner = new RUNNER("dotnet", "dotnet", compiler_under_test, test);

            let failure = get_real_FAILURE();

            set_private_instance_field(runner, "_failure", failure);

            let result = runner.get_result();

            should(result).be(failure, null, null);
        si

        RUNNER__get_result__given_no_failure__returns_PASS() is
            @test()

            let arguments = System.Array.empty`[object]();

            let compiler_under_test = get_mock_COMPILER_UNDER_TEST();
            let test = get_mock_TEST();
            let runner = new RUNNER("dotnet", "dotnet", compiler_under_test, test);

            let result = runner.get_result();

            should(isa PASS(result)).be_true(null, null);
        si
    si
si