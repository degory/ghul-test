# CI/CD pipeline. 

name: CICD

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number'
        required: true

  pull_request:
  push:
    branches: [master, main]

env:
  CI: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_NOLOGO: 1

jobs:
  version:
    name: Create a version number
    runs-on: ubuntu-20.04
    timeout-minutes: 1
    outputs:
      tag: ${{ steps.pick_version.outputs.tag }}
      package: ${{ steps.pick_version.outputs.package }}

    steps:
    - uses: actions/checkout@v2

    - name: Create version number
      id: create_version_number
      uses: anothrNick/github-tag-action@1.33.0
      if: ${{ github.actor != 'dependabot[bot]' }}      
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        WITH_V: true
        DEFAULT_BUMP: patch
        RELEASE_BRANCHES: main,master

    - name: Pick version
      id: pick_version
      run: |
        VALID_VERSION_REGEX="^v[0-9]+\.[0-9]+\.[0-9]+(-[A-Za-z0-9]+\.[0-9]+)?$"

        if [ "${{ github.actor }}" == "dependabot[bot]" ] ; then
          VERSION=v0.0.1-dependabot.$(date '+%Y%m%d%H%M%S')
        elif [ ! -z "${MANUAL_VERSION}" ] ; then
          echo "User supplied version: ${MANUAL_VERSION}"

          VERSION="${MANUAL_VERSION}"
        elif [ ! -z "${TAG_VERSION}" ] ; then
          echo "Tag bump generated version: ${TAG_VERSION}"

          VERSION="${TAG_VERSION}"
        else
          echo "Neither manual or tag version set"
          exit 1
        fi

        if [[ ${VERSION} =~ ${VALID_VERSION_REGEX} ]] && [ "${VERSION}" != "v0.0.0" ] ; then
          echo "Version number is valid: ${VERSION}"
          echo "::set-output name=tag::${VERSION}"
          echo "::set-output name=package::${VERSION:1}"
        else
          echo "Version number is not valid ${VERSION}"
          exit 1
        fi

      env:
        TAG_VERSION: ${{ steps.create_version_number.outputs.new_tag }}
        MANUAL_VERSION: ${{ github.event.inputs.version }}        

    - name: Echo version numbers
      run: |
        echo "tag version: ${{ steps.pick_version.outputs.tag }}"
        echo "package version: ${{ steps.pick_version.outputs.package }}"

  build:
    name: Build and publish NuGet package
    runs-on: ubuntu-latest

    container:
      image: mcr.microsoft.com/dotnet/sdk:6.0

    timeout-minutes: 10
    needs: [version]

    steps:
    - uses: actions/checkout@v2

    - name: Restore local .NET tools
      run: dotnet tool restore

    - name: Run tests
      run: dotnet test tests/tests.ghulproj      

    - name: Create package
      run: dotnet pack -p:Version=${{ needs.version.outputs.package }}

    - name: Upload .NET package artefact
      uses: actions/upload-artifact@v2
      with:
        name: package
        path: nupkg

    - name: Publish package to GitHub
      if: ${{ github.actor != 'dependabot[bot]' }}
      run: dotnet nuget push ./nupkg/*.nupkg -k ${GITHUB_TOKEN} -s https://nuget.pkg.github.com/degory/index.json --skip-duplicate --no-symbols true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Publish package to NuGet
      if: ${{ github.event_name == 'push' }}
      run: dotnet nuget push ./nupkg/*.nupkg -k ${NUGET_TOKEN} -s https://api.nuget.org/v3/index.json --skip-duplicate --no-symbols true
      env:
        NUGET_TOKEN: ${{ secrets.NUGET_TOKEN }}

  create_release:
    needs: [version, build]
    name: Create release
    runs-on: ubuntu-20.04

    timeout-minutes: 5
    if: ${{ github.event_name == 'push' }}

    steps:
    - uses: actions/checkout@v2

    - name: Download package
      uses: actions/download-artifact@v2
      with:
        name: package
        path: nupkg

    - name: Create changelog
      run: git log -1 --format="%s%n%n%b%n%n" >changelog.txt

    - name: Create a Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.version.outputs.tag }}
        release_name: ${{ needs.version.outputs.tag }}
        body_path: changelog.txt
        draft: false

    - name: Upload package asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./nupkg/ghul.test.${{ needs.version.outputs.package }}.nupkg
        asset_name: ghul.test.${{ needs.version.outputs.package }}.nupkg
        asset_content_type: application/octet-stream
